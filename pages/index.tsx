// import { db, app } from '@/utils/fire';
import type { NextPage } from 'next'
import { useSession } from 'next-auth/react';
import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useState } from 'react';
import s from '../styles/Home.module.scss'
import { AuthButton } from './../components/AuthButton';
import { useUserStore } from './../utils/store';
import { app, newTaskGroup } from './../utils/fire';
import { doc, setDoc, getFirestore } from "firebase/firestore";
// import { getDatabase, ref, set } from "firebase/database";
import { initializeApp } from 'firebase/app';
import { firebaseConfig } from './../utils/fire';
import { initUser } from '@/utils/fire';
import { getTaskGroups, getTasks, notification, requestNotificationPermission } from '@/utils/apputils';
import { addTask } from './../utils/fire';
import { useRouter } from 'next/dist/client/router';
import useTranslation from 'next-translate/useTranslation'

// const db = getFirestore(app)

const Home: NextPage = () => {
  const router = useRouter()
  const { t } = useTranslation('common');
  const [email, setEmail] = useState('')
  // const [selectedTaskGroup, setSelectedTaskGroup] = useState(0)
  const [taskGroups, setTaskGroups] = useState<{ id: string; data: any }[]>([])
  const [tasks, setTasks] = useState<{ id: string; data: any }[]>([])
  const { setTaskGroupIndex, taskGroupIndex } = useUserStore(
    state => state
  )
  const session = useSession()

  useEffect(() => {
    if (session.status === 'authenticated' && session.data.token != undefined) {
      //@ts-ignore
      const { name, email, picture } = session.data?.token;
      setEmail(email)
      initUser(name, email, picture)
      requestNotificationPermission()
      getTaskGroups(email).then(res => {
        setTaskGroups(res)

        if (res.length > 0)
          getTasks(email, res[taskGroupIndex].id)
            .then(res => setTasks(res))
      })

      // getTasks(email, 'GZL5Sph9QdnpfM853hMb').then(res => setTasks(res))
      // setTaskGroups()
    }
  }, [session])
  useEffect(() => {
    if (taskGroups.length > 0)
      getTasks(email, taskGroups[taskGroupIndex].id)
        .then(res => setTasks(res))
  }, [taskGroupIndex])

  return (
    <div className={s.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={s.main}>
        <h1>{t('user.profile')}</h1>
        <AuthButton />
        <pre>{JSON.stringify(session.data?.token, null, 2)}</pre>
        <button
          onClick={() => notification('this is test')}
        >notification</button>
        <button
          onClick={() => newTaskGroup(email, 'this is test').then(() => {
            getTaskGroups(email).then(res => setTaskGroups(res))
          })}
        >newTaskGroup</button>
        <ul
          className={` ${s.taskGroups} `}

        >

          {taskGroups.map((group, index) => <li
            key={group.id}
            className={taskGroupIndex === index ? s.selected : ''}
            onClick={() => {
              console.log(index)
              setTaskGroupIndex(index)
            }}
          >{group.data.title}</li>)}
        </ul>
        {/* <pre>{JSON.stringify(taskGroups, null, 2)}</pre> */}
        <button
          onClick={() => addTask(email, taskGroups[taskGroupIndex].id, { text: 'test task' })
            .then(() => {
              getTasks(email, taskGroups[taskGroupIndex].id)
                .then(res => setTasks(res))
            })}
        >addTask</button>
        <ul>
          {tasks.map(task => <li key={task.id}>{task.data.text}</li>)}
        </ul>
        <pre>{JSON.stringify(router, null, 2)}</pre>
      </main>

    </div>
  )
}

export default Home
